'use strict';
const path = require('path');

const URL_REG = /url\(["']{0,1}([^"'\s)]+)["']{0,1}\)/g;
const URL_REPLACE_REG = /^url\(["']{0,1}([^"'\s)]+)["']{0,1}\)$/;
const URL_CONTENT_REPLACE_REG = '(url\\(["\']*)(${url})(["\']*\\))';
/**
 * 获取组件相关文件名称
 * @param  {Object} file   文件对象
 * @param  {Object} config 文件配置
 * @return {Array}         相关文件列表
 */
exports.validComponentFile = function(file, config) {
    const pathInfo = path.parse(file.path);
    // 检测是否为CSS文件
    return pathInfo.ext === config.cssSuffix;
};

/**
 * 获取静态资源文件相对路径列表
 * @param  {[type]} content [description]
 * @param  {[type]} file    [description]
 * @return {[type]}         [description]
 */
exports.getStaticFilesList = function(content) {
    const matchList = content.match(URL_REG);
    if(matchList) {
        return matchList.map(function(matchItem) {
            return matchItem.replace(URL_REPLACE_REG, '$1');
        });
    }
    return [];
};


exports.replaceStaticFile = function(file, content, staticfilesList, config) {
    const pathInfo = path.parse(file.relative);
    staticfilesList.forEach(function(staticRelativePath) {
        const staticPath = config.domain + path.join(pathInfo.dir, staticRelativePath)
            .replace(/\\/g, '/') // 替换\为/
            .replace(/^([^/])/, '/$1'); //替换非/开头的为/;
        const regStaticPath = staticRelativePath.replace(/\?/g, '\\?');
        content = content.replace(new RegExp(URL_CONTENT_REPLACE_REG.replace('${url}', regStaticPath)), '$1' + staticPath + '$3');
    });
    return content;
};