'use strict';
const path = require('path');
const fs = require('fs');
const normalize = require('normalize-path');
/**
 * 获取组件相关文件名称
 * @param  {Object} file   文件对象
 * @param  {Object} config 文件配置
 * @return {Array}         相关文件列表
 */
exports.getComponentFileNames = function(file, config) {
    const pathInfo = path.parse(file.path);
    const suffixCheckList = [config.cssSuffix, config.scriptSuffix];
    // 检测是否为模板文件
    if(pathInfo.ext !== config.tplSuffix) return null;
    // 检测对应后缀文件是否存在
    const fileNames = suffixCheckList.map(function(suffix) {
        if(fs.existsSync(path.join(pathInfo.dir, pathInfo.name + suffix))) {
            const relativePath = file.relative.replace(new RegExp(`${config.tplSuffix}$`), suffix);
            const filepath = normalize(relativePath).replace(/^([^\/])/, '/$1'); //替换非/开头的为/
            const nameKey = (config.namespace ? (config.namespace + ':') : '') + filepath;
            return nameKey;
        }
        return null;
    });
    // 检测是否有匹配数据
    if(fileNames.some(function(name) {
        return name;
    })) return fileNames;
    return null;
};

exports.insertFiles = function(content, files, config) {
    let newCon = '';
    files.forEach(function(name) {
        if(name) newCon += `{{{${config.insertName} "${name}"}}}\n`;
    });
    newCon += content;
    return newCon;
};